// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2025 08:03:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ProjetoSD1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProjetoSD1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg A4;
reg B0;
reg B1;
reg B2;
reg B3;
reg B4;
reg S0;
reg S1;
reg S2;
// wires                                               
wire A_Ad_Input;
wire A_Ae_Input;
wire A_Bd_Input;
wire A_Be_Input;
wire A_Cd_Input;
wire A_Ce_Input;
wire A_Dd_Input;
wire A_De_Input;
wire A_Ed_Input;
wire A_Ee_Input;
wire A_Fd_Input;
wire A_Fe_Input;
wire A_Gd_Input;
wire A_Ge_Input;
wire Ad;
wire Ae;
wire B_Ad_Input;
wire B_Ae_Input;
wire B_Bd_Input;
wire B_Be_Input;
wire B_Cd_Input;
wire B_Ce_Input;
wire B_Dd_Input;
wire B_De_Input;
wire B_Ed_Input;
wire B_Ee_Input;
wire B_Fd_Input;
wire B_Fe_Input;
wire B_Gd_Input;
wire B_Ge_Input;
wire Bd;
wire Be;
wire Cd;
wire Ce;
wire Dd;
wire De;
wire Ed;
wire Ee;
wire F0;
wire F1;
wire F2;
wire F3;
wire F4;
wire F5;
wire Fd;
wire Fe;
wire Gd;
wire Ge;
wire LED_STATUS;
wire SINAL_A;
wire SINAL_B;
wire SINAL_F;

// assign statements (if any)                          
ProjetoSD1 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A_Ad_Input(A_Ad_Input),
	.A_Ae_Input(A_Ae_Input),
	.A_Bd_Input(A_Bd_Input),
	.A_Be_Input(A_Be_Input),
	.A_Cd_Input(A_Cd_Input),
	.A_Ce_Input(A_Ce_Input),
	.A_Dd_Input(A_Dd_Input),
	.A_De_Input(A_De_Input),
	.A_Ed_Input(A_Ed_Input),
	.A_Ee_Input(A_Ee_Input),
	.A_Fd_Input(A_Fd_Input),
	.A_Fe_Input(A_Fe_Input),
	.A_Gd_Input(A_Gd_Input),
	.A_Ge_Input(A_Ge_Input),
	.Ad(Ad),
	.Ae(Ae),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.B_Ad_Input(B_Ad_Input),
	.B_Ae_Input(B_Ae_Input),
	.B_Bd_Input(B_Bd_Input),
	.B_Be_Input(B_Be_Input),
	.B_Cd_Input(B_Cd_Input),
	.B_Ce_Input(B_Ce_Input),
	.B_Dd_Input(B_Dd_Input),
	.B_De_Input(B_De_Input),
	.B_Ed_Input(B_Ed_Input),
	.B_Ee_Input(B_Ee_Input),
	.B_Fd_Input(B_Fd_Input),
	.B_Fe_Input(B_Fe_Input),
	.B_Gd_Input(B_Gd_Input),
	.B_Ge_Input(B_Ge_Input),
	.Bd(Bd),
	.Be(Be),
	.Cd(Cd),
	.Ce(Ce),
	.Dd(Dd),
	.De(De),
	.Ed(Ed),
	.Ee(Ee),
	.F0(F0),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.F4(F4),
	.F5(F5),
	.Fd(Fd),
	.Fe(Fe),
	.Gd(Gd),
	.Ge(Ge),
	.LED_STATUS(LED_STATUS),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.SINAL_A(SINAL_A),
	.SINAL_B(SINAL_B),
	.SINAL_F(SINAL_F)
);
initial 
begin 
#1000000 $finish;
end 

// A0
initial
begin
	A0 = 1'b0;
end 

// A1
initial
begin
	A1 = 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
end 

// A3
initial
begin
	A3 = 1'b0;
end 

// A4
initial
begin
	A4 = 1'b0;
end 

// B0
initial
begin
	B0 = 1'b0;
end 

// B1
initial
begin
	B1 = 1'b1;
end 

// B2
initial
begin
	B2 = 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
end 

// B4
initial
begin
	B4 = 1'b0;
end 

// S0
initial
begin
	S0 = 1'b0;
end 

// S1
initial
begin
	S1 = 1'b0;
end 

// S2
initial
begin
	S2 = 1'b0;
end 
endmodule

